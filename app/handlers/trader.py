from __future__ import annotations
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from sqlalchemy import select

from app.db.base import async_session
from app.db.models import User, RoleEnum, TraderProfile, TraderCard
from app.handlers.utils import ensure_user, mask_card

# –µ—Å–ª–∏ –µ—Å—Ç—å —Å–µ—Ä–≤–∏—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ (–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
try:
    from app.services.settings import get_settings
except Exception:
    get_settings = None  # graceful fallback

router = Router(name="trader")

def trader_menu_inline_kb(is_online: bool):
    b = InlineKeyboardBuilder()
    b.button(text=("üü¢ –û–Ω–ª–∞–π–Ω" if is_online else "‚ö™ –û—Ñ—Ñ–ª–∞–π–Ω"), callback_data="toggle_online")
    b.adjust(1)
    return b.as_markup()

def trader_reply_kb() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üí∞ –ë–∞–ª–∞–Ω—Å")],
            [KeyboardButton(text="üßë‚Äçüíº –ö–∞–±–∏–Ω–µ—Ç")],
        ],
        resize_keyboard=True,
        one_time_keyboard=False,
        is_persistent=True,
    )

async def profile_text(user_id: int) -> str:
    async with async_session() as session:
        profile = await session.scalar(select(TraderProfile).where(TraderProfile.user_id == user_id))
        if not profile:
            return "–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        cards = (await session.execute(select(TraderCard).where(TraderCard.profile_id == profile.id))).scalars().all()

        lines = [
            "<b>–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç —Ç—Ä–µ–π–¥–µ—Ä–∞</b>",
            f"ID: {profile.external_id}",
            f"–ù–∏–∫: @{profile.nickname}",
            f"–ò–º—è: {profile.full_name}",
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {profile.phone}",
            f"–†–µ—Ñ. –∫–æ–¥: {profile.referral_code or '-'}",
            "",
            f"<b>–ö–∞—Ä—Ç—ã ({len(cards)}):</b>",
        ]
        for i, c in enumerate(cards, 1):
            bank_name = c.bank.value if c.bank.name != "OTHER" else (c.bank_other_name or "–î–†–£–ì–û–ô –ë–ê–ù–ö")
            lines.append(
                f"{i}) {bank_name} ‚Ä¢ {mask_card(c.card_number)} ‚Ä¢ {c.holder_name} ‚Ä¢ "
                f"–°–ë–ü: {'–µ—Å—Ç—å' if c.has_sbp else '–Ω–µ—Ç'}"
            )
            if c.has_sbp:
                lines.append(f"   –°–ë–ü –Ω–æ–º–µ—Ä: {c.sbp_number}; –°–ë–ü –§–ò–û: {c.sbp_fullname}")
        return "\n".join(lines)

@router.message(Command("menu"))
async def show_menu(message: Message):
    async with async_session() as session:
        user = await ensure_user(session, message.from_user)
        if user.role != RoleEnum.trader:
            await message.answer("–ú–µ–Ω—é —Ç—Ä–µ–π–¥–µ—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ —Ç—Ä–µ–π–¥–µ—Ä–∞–º.")
            return
        if not user.is_active:
            await message.answer("–î–æ—Å—Ç—É–ø –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω: /access")
            return
        text = await profile_text(user.id)
        await message.answer(
            text + f"\n\n–°—Ç–∞—Ç—É—Å: {'–û–Ω–ª–∞–π–Ω' if user.is_online else '–û—Ñ—Ñ–ª–∞–π–Ω'}",
            reply_markup=trader_menu_inline_kb(user.is_online),
        )
        # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –∫–æ–º–∞–Ω–¥ (–≤ —Ç–æ–º —á–∏—Å–ª–µ –ë–∞–ª–∞–Ω—Å)
        await message.answer("–ú–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π:", reply_markup=trader_reply_kb())

# –ö–Ω–æ–ø–∫–∞/–∫–æ–º–∞–Ω–¥–∞ –ë–∞–ª–∞–Ω—Å
@router.message(F.text.in_(["üí∞ –ë–∞–ª–∞–Ω—Å", "–ë–∞–ª–∞–Ω—Å"]))
@router.message(Command("balance"))
async def trader_balance(message: Message):
    async with async_session() as session:
        user = await ensure_user(session, message.from_user)
        if user.role != RoleEnum.trader:
            await message.answer("–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ —Ç—Ä–µ–π–¥–µ—Ä–∞–º.")
            return
        if not user.is_active:
            await message.answer("–î–æ—Å—Ç—É–ø –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω: /access")
            return

        bal = float(user.balance_rub or 0.0)
        line = f"üí∞ <b>–í–∞—à –±–∞–ª–∞–Ω—Å</b>: <code>{bal:,.2f} RUB</code>".replace(",", " ")
        if get_settings:
            try:
                s = await get_settings()
                if s.rub_per_usdt > 0:
                    usdt = bal / float(s.rub_per_usdt)
                    line += f"\n‚âà <code>{usdt:.2f} USDT</code> –ø–æ –∫—É—Ä—Å—É {float(s.rub_per_usdt):.4f}"
            except Exception:
                pass
        await message.answer(line, reply_markup=trader_reply_kb())

# –ö–Ω–æ–ø–∫–∞ –ö–∞–±–∏–Ω–µ—Ç
@router.message(F.text.in_(["üßë‚Äçüíº –ö–∞–±–∏–Ω–µ—Ç", "–ö–∞–±–∏–Ω–µ—Ç"]))
async def trader_cabinet(message: Message):
    async with async_session() as session:
        user = await ensure_user(session, message.from_user)
        if user.role != RoleEnum.trader:
            await message.answer("–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ —Ç—Ä–µ–π–¥–µ—Ä–∞–º.")
            return
        if not user.is_active:
            await message.answer("–î–æ—Å—Ç—É–ø –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω: /access")
            return
        
        text = await profile_text(user.id)
        await message.answer(
            text + f"\n\n–°—Ç–∞—Ç—É—Å: {'–û–Ω–ª–∞–π–Ω' if user.is_online else '–û—Ñ—Ñ–ª–∞–π–Ω'}",
            reply_markup=trader_menu_inline_kb(user.is_online),
        )

@router.callback_query(F.data == "toggle_online")
async def toggle_online(cq: CallbackQuery):
    async with async_session() as session:
        user = await session.scalar(select(User).where(User.tg_id == cq.from_user.id))
        if not user or user.role != RoleEnum.trader:
            await cq.answer("–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ —Ç—Ä–µ–π–¥–µ—Ä–∞–º", show_alert=True)
            return
        if not user.is_active:
            await cq.answer("–°–Ω–∞—á–∞–ª–∞ –∞–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –¥–æ—Å—Ç—É–ø —á–µ—Ä–µ–∑ —Ç–æ–∫–µ–Ω (/access).", show_alert=True)
            return

        user.is_online = not user.is_online
        await session.commit()

        text = await profile_text(user.id)
        await cq.message.edit_text(
            text + f"\n\n–°—Ç–∞—Ç—É—Å: {'–û–Ω–ª–∞–π–Ω' if user.is_online else '–û—Ñ—Ñ–ª–∞–π–Ω'}",
            reply_markup=trader_menu_inline_kb(user.is_online),
        )
        await cq.answer("–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª—ë–Ω")
