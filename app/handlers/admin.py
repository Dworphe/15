from __future__ import annotations
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardMarkup, KeyboardButton
from sqlalchemy import select
import phonenumbers
from functools import wraps
import importlib

from app.config import settings
from app.db.base import async_session
from app.db.models import User, RoleEnum, TraderProfile, TraderCard, BankEnum, AccessToken
from app.handlers.utils import ensure_user, generate_token, mask_card

router = Router(name="admin")

def _try_import(path: str):
    try:
        return importlib.import_module(path)
    except Exception:
        return None

# –§—É–Ω–∫—Ü–∏—è _resolve_buy_entry –æ—Ç–∫–ª—é—á–µ–Ω–∞ –≤ –ø–∞—Ç—á–µ ‚Ññ20
# –ú–∞—Å—Ç–µ—Ä –ø–æ–∫—É–ø–∫–∏/–ø—Ä–æ–¥–∞–∂–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω

# ---- FSM ----
class RegStates(StatesGroup):
    ext_id = State()
    nickname = State()
    full_name = State()
    phone = State()
    referral = State()
    card_bank = State()
    card_bank_other = State()
    card_number = State()
    card_sbp_yesno = State()
    card_sbp_number = State()
    card_sbp_fio = State()
    card_holder = State()
    card_confirm = State()
    add_more_cards = State()
    finish_confirm = State()

BANK_LABELS = [
    BankEnum.TBANK, BankEnum.ALFABANK, BankEnum.SBERBANK, BankEnum.VTB,
    BankEnum.YANDEX, BankEnum.OZON, BankEnum.OTHER
]

def bank_kb():
    b = InlineKeyboardBuilder()
    for bank in BANK_LABELS:
        b.button(text=bank.value, callback_data=f"bank:{bank.name}")
    b.adjust(2)
    return b.as_markup()

def yesno_kb(cb_yes: str, cb_no: str):
    b = InlineKeyboardBuilder()
    b.button(text="–î–∞", callback_data=cb_yes)
    b.button(text="–ù–µ—Ç", callback_data=cb_no)
    b.adjust(2)
    return b.as_markup()

def admin_only(func):
    @wraps(func)
    async def wrapper(message: Message, *args, **kwargs):
        async with async_session() as session:
            u = await ensure_user(session, message.from_user)
            if u.role != RoleEnum.admin:
                await message.answer("–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
                return
        return await func(message, *args, **kwargs)
    return wrapper

@router.message(Command("admin"))
@admin_only
async def admin_menu(message: Message):
    b = InlineKeyboardBuilder()
    b.button(text="‚ûï –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç—Ä–µ–π–¥–µ—Ä–∞", callback_data="admin:new_trader")
    # –ù–æ–≤—ã–µ —Ç–æ—Ä–≥–∏ (–ø–∞—Ç—á ‚Ññ21)
    b.button(text="üÜï –¢–æ—Ä–≥–∏ (NEW)", callback_data="admin:trading_menu")
    b.button(text="üí∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–º", callback_data="admin:balance_menu")
    b.button(text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí –§–∏–Ω–∞–Ω—Å—ã", callback_data="admin:settings_fin")
    # NEW: –∫–Ω–æ–ø–∫–∞ ¬´–ö—É—Ä—Å USDT¬ª
    b.button(text="üí± –ö—É—Ä—Å USDT", callback_data="admin:rate_menu")
    b.adjust(1)
    await message.answer("–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=b.as_markup())

@router.callback_query(F.data == "admin:new_trader")
async def start_reg(cq: CallbackQuery, state: FSMContext):
    await state.clear()
    await state.set_state(RegStates.ext_id)
    await cq.message.answer("1) –í–≤–µ–¥–∏—Ç–µ ID —Ç—Ä–µ–π–¥–µ—Ä–∞ (–≤–Ω–µ—à–Ω–∏–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä).")
    await cq.answer()

@router.callback_query(F.data == "admin:settings_fin")
async def nav_settings(cq: CallbackQuery):
    from app.handlers.admin_settings import show_finance_menu
    await show_finance_menu(cq.message, None)
    await cq.answer()

# –ù–æ–≤—ã–µ —Ç–æ—Ä–≥–∏ (–ø–∞—Ç—á ‚Ññ21)
@router.callback_query(F.data == "admin:trading_menu")
async def admin_trading_menu(cq: CallbackQuery):
    """–û—Ç–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é –Ω–æ–≤—ã—Ö —Ç–æ—Ä–≥–æ–≤"""
    async with async_session() as s:
        u = await ensure_user(s, cq.from_user)
        if u.role != RoleEnum.admin:
            await cq.answer("–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.", show_alert=True)
            return
    
    b = InlineKeyboardBuilder()
    b.button(text="üîÑ –°–æ–∑–¥–∞—Ç—å –ü–æ–∫—É–ø–∫—É (—Å–∫–µ–ª–µ—Ç)", callback_data="admin:trading_buy_new")
    b.button(text="üîÑ –°–æ–∑–¥–∞—Ç—å –ü—Ä–æ–¥–∞–∂—É (—Å–∫–µ–ª–µ—Ç)", callback_data="admin:trading_sell_new")
    b.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin:menu")
    b.adjust(1)
    
    await cq.message.edit_text(
        "üÜï <b>–¢–æ—Ä–≥–∏ (NEW)</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è:",
        reply_markup=b.as_markup()
    )
    await cq.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–æ—Ä–≥–æ–≤ –æ—Ç–∫–ª—é—á–µ–Ω—ã –≤ –ø–∞—Ç—á–µ ‚Ññ20
# @router.callback_query(F.data == "admin:sell")
# @router.callback_query(F.data == "admin:buy_new")

@router.callback_query(F.data == "admin:balance_menu")
async def admin_open_balance_menu(cq: CallbackQuery):
    """–û—Ç–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–º –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é –∞–¥–º–∏–Ω–∞"""
    from app.handlers.admin_balance import admin_balance_menu_kb
    await cq.message.answer(
        "<b>–û–ø–µ—Ä–∞—Ü–∏–∏ —Å –±–∞–ª–∞–Ω—Å–æ–º</b>\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=admin_balance_menu_kb()
    )
    await cq.answer()

@router.message(RegStates.ext_id)
async def reg_ext_id(message: Message, state: FSMContext):
    v = (message.text or "").strip()
    if not v:
        await message.answer("ID –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥.")
        return
    await state.update_data(ext_id=v)
    await state.set_state(RegStates.nickname)
    await message.answer("2) –ù–∏–∫–Ω–µ–π–º —Ç—Ä–µ–π–¥–µ—Ä–∞ (–±–µ–∑ @).")

@router.message(RegStates.nickname)
async def reg_nickname(message: Message, state: FSMContext):
    v = (message.text or "").strip().lstrip("@")
    if not v:
        await message.answer("–ù–∏–∫ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥.")
        return
    await state.update_data(nickname=v)
    await state.set_state(RegStates.full_name)
    await message.answer("3) –ò–º—è —Ç—Ä–µ–π–¥–µ—Ä–∞.")

@router.message(RegStates.full_name)
async def reg_full_name(message: Message, state: FSMContext):
    v = (message.text or "").strip()
    if not v:
        await message.answer("–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥.")
        return
    await state.update_data(full_name=v)
    await state.set_state(RegStates.phone)
    await message.answer("4) –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Ç—Ä–µ–π–¥–µ—Ä–∞ (–≤ –ª—é–±–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å).")

@router.message(RegStates.phone)
async def reg_phone(message: Message, state: FSMContext):
    raw = (message.text or "").strip()
    try:
        num = phonenumbers.parse(raw, "RU")
        if not phonenumbers.is_valid_number(num):
            raise ValueError
        e164 = phonenumbers.format_number(num, phonenumbers.PhoneNumberFormat.E164)
    except Exception:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –Ω–æ–º–µ—Ä. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")
        return
    await state.update_data(phone=e164)
    await state.set_state(RegStates.referral)
    await message.answer("5) –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ (–º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –ø—É—Å—Ç—ã–º, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-' –µ—Å–ª–∏ –Ω–µ—Ç).")

@router.message(RegStates.referral)
async def reg_referral(message: Message, state: FSMContext):
    v = (message.text or "").strip()
    if v == "-" or v == "":
        v = None
    await state.update_data(referral=v)
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é –∫–∞—Ä—Ç—ã
    await state.update_data(cards=[])
    await state.set_state(RegStates.card_bank)
    await message.answer("6) –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã —Ç—Ä–µ–π–¥–µ—Ä–∞.\n–í—ã–±–µ—Ä–∏—Ç–µ –±–∞–Ω–∫:", reply_markup=bank_kb())

@router.callback_query(RegStates.card_bank, F.data.startswith("bank:"))
async def card_pick_bank(cq: CallbackQuery, state: FSMContext):
    bank_name = cq.data.split(":", 1)[1]
    await cq.answer()
    if bank_name == BankEnum.OTHER.name:
        await state.set_state(RegStates.card_bank_other)
        await cq.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞.")
    else:
        await state.update_data(card_bank=bank_name, card_bank_other=None)
        await state.set_state(RegStates.card_number)
        await cq.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã (16 —Ü–∏—Ñ—Ä).")

@router.message(RegStates.card_bank_other)
async def card_bank_other(message: Message, state: FSMContext):
    name = (message.text or "").strip()
    if not name:
        await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
        return
    await state.update_data(card_bank=BankEnum.OTHER.name, card_bank_other=name)
    await state.set_state(RegStates.card_number)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã (16 —Ü–∏—Ñ—Ä).")

@router.message(RegStates.card_number)
async def card_number(message: Message, state: FSMContext):
    digits = "".join(ch for ch in (message.text or "") if ch.isdigit())
    if len(digits) != 16:
        await message.answer("–ù—É–∂–Ω–æ —Ä–æ–≤–Ω–æ 16 —Ü–∏—Ñ—Ä. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥.")
        return
    await state.update_data(card_number=digits)
    await state.set_state(RegStates.card_sbp_yesno)
    await message.answer("–ï—Å—Ç—å –ª–∏ –°–ë–ü —É –∫–∞—Ä—Ç—ã?", reply_markup=yesno_kb("sbp:yes", "sbp:no"))

@router.callback_query(RegStates.card_sbp_yesno, F.data.startswith("sbp:"))
async def card_sbp(cq: CallbackQuery, state: FSMContext):
    ans = cq.data.split(":")[1]
    await cq.answer()
    if ans == "yes":
        await state.update_data(has_sbp=True)
        await state.set_state(RegStates.card_sbp_number)
        await cq.message.answer("–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–ª—è –°–ë–ü.")
    else:
        await state.update_data(has_sbp=False, sbp_number=None, sbp_fullname=None)
        await state.set_state(RegStates.card_holder)
        await cq.message.answer("–ò–º—è –¥–µ—Ä–∂–∞—Ç–µ–ª—è –∫–∞—Ä—Ç—ã (–∫–∞–∫ –Ω–∞ –∫–∞—Ä—Ç–µ).")

@router.message(RegStates.card_sbp_number)
async def card_sbp_number(message: Message, state: FSMContext):
    v = (message.text or "").strip()
    if not v:
        await message.answer("–ù–æ–º–µ—Ä –°–ë–ü –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
        return
    await state.update_data(sbp_number=v)
    await state.set_state(RegStates.card_sbp_fio)
    await message.answer("–§–ò–û –¥–ª—è –°–ë–ü (–∫–∞–∫ –≤ –±–∞–Ω–∫–µ).")

@router.message(RegStates.card_sbp_fio)
async def card_sbp_fio(message: Message, state: FSMContext):
    v = (message.text or "").strip()
    if not v:
        await message.answer("–§–ò–û –¥–ª—è –°–ë–ü –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
        return
    await state.update_data(sbp_fullname=v)
    await state.set_state(RegStates.card_holder)
    await message.answer("–ò–º—è –¥–µ—Ä–∂–∞—Ç–µ–ª—è –∫–∞—Ä—Ç—ã (–∫–∞–∫ –Ω–∞ –∫–∞—Ä—Ç–µ).")

@router.message(RegStates.card_holder)
async def card_holder(message: Message, state: FSMContext):
    v = (message.text or "").strip()
    if not v:
        await message.answer("–ò–º—è –¥–µ—Ä–∂–∞—Ç–µ–ª—è –∫–∞—Ä—Ç—ã –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
        return
    await state.update_data(holder_name=v)

    data = await state.get_data()
    bank = data["card_bank"]
    bank_other = data.get("card_bank_other")
    card_number = data["card_number"]
    has_sbp = data.get("has_sbp", False)
    sbp_number = data.get("sbp_number")
    sbp_fullname = data.get("sbp_fullname")

    text = (
        "<b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã</b>\n"
        f"–ë–∞–Ω–∫: {(bank_other if bank == BankEnum.OTHER.name else BankEnum[bank].value)}\n"
        f"–ö–∞—Ä—Ç–∞: {mask_card(card_number)}\n"
        f"–î–µ—Ä–∂–∞—Ç–µ–ª—å: {v}\n"
        f"–°–ë–ü: {'–µ—Å—Ç—å' if has_sbp else '–Ω–µ—Ç'}\n"
        f"{'–°–ë–ü –Ω–æ–º–µ—Ä: ' + sbp_number if has_sbp else ''}\n"
        f"{'–°–ë–ü –§–ò–û: ' + sbp_fullname if has_sbp else ''}"
    )
    await state.set_state(RegStates.card_confirm)
    await message.answer(text, reply_markup=yesno_kb("card:ok", "card:redo"))

@router.callback_query(RegStates.card_confirm, F.data.startswith("card:"))
async def card_confirm(cq: CallbackQuery, state: FSMContext):
    action = cq.data.split(":")[1]
    await cq.answer()
    if action == "redo":
        await state.set_state(RegStates.card_bank)
        await cq.message.answer("–ü–æ–≤—Ç–æ—Ä–∏–º –≤–≤–æ–¥ –∫–∞—Ä—Ç—ã. –í—ã–±–µ—Ä–∏—Ç–µ –±–∞–Ω–∫:", reply_markup=bank_kb())
        return

    data = await state.get_data()
    cards = list(data.get("cards", []))
    cards.append({
        "bank": data["card_bank"],
        "bank_other_name": data.get("card_bank_other"),
        "card_number": data["card_number"],
        "holder_name": data["holder_name"],
        "has_sbp": data.get("has_sbp", False),
        "sbp_number": data.get("sbp_number"),
        "sbp_fullname": data.get("sbp_fullname"),
    })
    await state.update_data(cards=cards)

    await state.set_state(RegStates.add_more_cards)
    await cq.message.answer("–î–æ–±–∞–≤–∏—Ç—å –µ—â—ë –∫–∞—Ä—Ç—É?", reply_markup=yesno_kb("more:yes", "more:no"))

@router.callback_query(RegStates.add_more_cards, F.data.startswith("more:"))
async def more_cards(cq: CallbackQuery, state: FSMContext):
    ans = cq.data.split(":")[1]
    await cq.answer()
    if ans == "yes":
        # –°–±—Ä–æ—Å –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–æ–ª–µ–π –∫–∞—Ä—Ç—ã
        for k in ["card_bank","card_bank_other","card_number","holder_name","has_sbp","sbp_number","sbp_fullname"]:
            await state.update_data(**{k: None})
        await state.set_state(RegStates.card_bank)
        await cq.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –±–∞–Ω–∫ —Å–ª–µ–¥—É—é—â–µ–π –∫–∞—Ä—Ç—ã:", reply_markup=bank_kb())
        return

    # –ò–Ω–∞—á–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–¥–∫—É –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    data = await state.get_data()
    summary = (
        "<b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ç—Ä–µ–π–¥–µ—Ä–∞</b>\n\n"
        f"ID: {data['ext_id']}\n"
        f"–ù–∏–∫: @{data['nickname']}\n"
        f"–ò–º—è: {data['full_name']}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n"
        f"–†–µ—Ñ. –∫–æ–¥: {data.get('referral') or '-'}\n"
        f"–ö–∞—Ä—Ç: {len(data.get('cards', []))}\n"
    )
    await state.set_state(RegStates.finish_confirm)
    await cq.message.answer(summary, reply_markup=yesno_kb("finish:ok", "finish:cancel"))

@router.callback_query(RegStates.finish_confirm, F.data.startswith("finish:"))
async def finish(cq: CallbackQuery, state: FSMContext):
    ans = cq.data.split(":")[1]
    await cq.answer()
    if ans == "cancel":
        await state.clear()
        await cq.message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ.")
        return

    data = await state.get_data()
    ext_id = data["ext_id"]
    nickname = data["nickname"]
    full_name = data["full_name"]
    phone = data["phone"]
    referral = data.get("referral")
    cards = data.get("cards", [])

    # –°–æ–∑–¥–∞—ë–º –ø—Ä–æ—Ñ–∏–ª—å + –∫–∞—Ä—Ç—ã + —Ç–æ–∫–µ–Ω
    async with async_session() as session:
        # –ü—Ä–æ–≤–µ—Ä–∏–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å external_id
        exists = await session.scalar(select(TraderProfile).where(TraderProfile.external_id == ext_id))
        if exists:
            await cq.message.answer("–ü—Ä–æ—Ñ–∏–ª—å —Å —Ç–∞–∫–∏–º ID —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü—Ä–æ—Ü–µ—Å—Å –ø—Ä–µ—Ä–≤–∞–Ω.")
            return

        profile = TraderProfile(
            external_id=ext_id,
            nickname=nickname,
            full_name=full_name,
            phone=phone,
            referral_code=referral,
            user_id=None,
        )
        session.add(profile)
        await session.flush()

        for c in cards:
            bank_enum = BankEnum[c["bank"]] if c["bank"] in BankEnum.__members__ else BankEnum.OTHER
            session.add(TraderCard(
                profile_id=profile.id,
                bank=bank_enum,
                bank_other_name=c.get("bank_other_name"),
                card_number=c["card_number"],
                holder_name=c["holder_name"],
                has_sbp=bool(c.get("has_sbp")),
                sbp_number=c.get("sbp_number"),
                sbp_fullname=c.get("sbp_fullname"),
            ))

        # –¢–æ–∫–µ–Ω –Ω–∞ 20 —Å–∏–º–≤–æ–ª–æ–≤, –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å
        token = generate_token(20)
        while await session.scalar(select(AccessToken).where(AccessToken.token == token)):
            token = generate_token(20)

        session.add(AccessToken(profile_id=profile.id, token=token))
        await session.commit()

    await state.clear()
    await cq.message.answer(
        "<b>–ì–æ—Ç–æ–≤–æ!</b>\n"
        "–ü—Ä–æ—Ñ–∏–ª—å —Ç—Ä–µ–π–¥–µ—Ä–∞ —Å–æ–∑–¥–∞–Ω. –ü–µ—Ä–µ–¥–∞–π—Ç–µ —Ç—Ä–µ–π–¥–µ—Ä—É —ç—Ç–æ—Ç —Ç–æ–∫–µ–Ω –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É:\n\n"
        f"<code>{token}</code>\n\n"
        "–¢—Ä–µ–π–¥–µ—Ä –≤–≤–æ–¥–∏—Ç –∫–æ–º–∞–Ω–¥—É /access –∏ –≤—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–æ–∫–µ–Ω."
    )
