# app/handlers/sell_winner.py
from __future__ import annotations
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from sqlalchemy import select
from datetime import datetime, timedelta
from zoneinfo import ZoneInfo

from app.db.base import async_session
from app.db.models import Deal, DealStatus, TraderCard, User, RoleEnum
from app.handlers.utils import ensure_user
from app.services.balance import release_usdt, consume_reserved_usdt
from app.utils.money import bank_round_2
from app.utils.validation import mask_card

router = Router(name="sell_winner")
TZ = ZoneInfo("Europe/Amsterdam")

class PickCardStates(StatesGroup):
    waiting_card = State()

def kb_winner_actions(deal_id: int):
    b = InlineKeyboardBuilder()
    b.button(text="üîÑ –°–º–µ–Ω–∏—Ç—å –∫–∞—Ä—Ç—É", callback_data=f"winner:change_card:{deal_id}")
    b.button(text="‚ùå –û—Ç–º–µ–Ω–∞ —Å–¥–µ–ª–∫–∏ (-200 RUB)", callback_data=f"winner:cancel:{deal_id}")
    b.adjust(1)
    return b.as_markup()

def kb_admin_paid(deal_id: int):
    b = InlineKeyboardBuilder()
    b.button(text="‚úÖ –ü–µ—Ä–µ–≤–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω", callback_data=f"admin:paid:{deal_id}")
    b.adjust(1)
    return b.as_markup()

@router.message(Command("pick_card"))
async def pick_card_start(message: Message, state: FSMContext):
    try:
        deal_id = int(message.text.split()[1])
    except (IndexError, ValueError):
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /pick_card <ID —Å–¥–µ–ª–∫–∏>")
        return
    
    async with async_session() as s:
        u = await ensure_user(s, message.from_user)
        deal = await s.get(Deal, deal_id)
        
        if not deal:
            await message.answer("–°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return
        
        if not deal.winner_user_id or int(deal.winner_user_id) != u.id:
            await message.answer("–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–º —ç—Ç–æ–π —Å–¥–µ–ª–∫–∏.")
            return
        
        if deal.status != DealStatus.WAITING_ADMIN_TRANSFER:
            await message.answer("–°–¥–µ–ª–∫–∞ –Ω–µ –≤ —Å—Ç–∞—Ç—É—Å–µ –æ–∂–∏–¥–∞–Ω–∏—è –æ–ø–ª–∞—Ç—ã.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ä—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        profile = await s.execute(
            select(TraderCard).where(TraderCard.profile_id == u.id)
        )
        cards = profile.scalars().all()
        
        if not cards:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞—Ä—Ç. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return
        
        await state.set_state(PickCardStates.waiting_card)
        await state.update_data(deal_id=deal_id)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ä—Ç—ã
        b = InlineKeyboardBuilder()
        for card in cards:
            bank_name = card.bank.value if card.bank != "OTHER" else (card.bank_other_name or "–î—Ä—É–≥–æ–π –±–∞–Ω–∫")
            card_text = f"{bank_name} ‚Ä¢ {mask_card(card.card_number)} ‚Ä¢ {card.holder_name}"
            b.button(text=card_text, callback_data=f"pick:card:{deal_id}:{card.id}")
        b.adjust(1)
        
        await message.answer(
            f"<b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞</b>\n"
            f"–°–¥–µ–ª–∫–∞ ‚Ññ <code>{deal.deal_no}</code>\n"
            f"–°—É–º–º–∞: {float(deal.amount_rub):.2f} RUB\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç—É:",
            reply_markup=b.as_markup()
        )

@router.callback_query(F.data.startswith("pick:card:"))
async def card_selected(cq: CallbackQuery, state: FSMContext):
    _, _, deal_id_s, card_id_s = cq.data.split(":")
    deal_id = int(deal_id_s)
    card_id = int(card_id_s)
    
    async with async_session() as s:
        deal = await s.get(Deal, deal_id)
        card = await s.get(TraderCard, card_id)
        
        if not deal or not card:
            await cq.answer("–û—à–∏–±–∫–∞: —Å–¥–µ–ª–∫–∞ –∏–ª–∏ –∫–∞—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–Ω—ç–ø—à–æ—Ç—ã –∫–∞—Ä—Ç—ã
        deal.winner_card_id = card.id
        deal.winner_card_bank = card.bank.value if card.bank != "OTHER" else (card.bank_other_name or "–î—Ä—É–≥–æ–π –±–∞–Ω–∫")
        deal.winner_card_mask = mask_card(card.card_number)
        deal.winner_card_holder = card.holder_name
        
        await s.commit()
        
        await cq.message.edit_text(
            f"<b>‚úÖ –ö–∞—Ä—Ç–∞ –≤—ã–±—Ä–∞–Ω–∞!</b>\n"
            f"–°–¥–µ–ª–∫–∞ ‚Ññ <code>{deal.deal_no}</code>\n"
            f"–ë–∞–Ω–∫: {deal.winner_card_bank}\n"
            f"–ö–∞—Ä—Ç–∞: {deal.winner_card_mask}\n"
            f"–î–µ—Ä–∂–∞—Ç–µ–ª—å: {deal.winner_card_holder}\n\n"
            f"–û–∂–∏–¥–∞–π—Ç–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n"
            f"–î–µ–¥–ª–∞–π–Ω: –¥–æ {deal.pay_deadline_at.astimezone(TZ).strftime('%H:%M')}",
            reply_markup=kb_winner_actions(deal_id)
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤
        await notify_admins_card_selected(deal, card)
        
        await cq.answer("–ö–∞—Ä—Ç–∞ –≤—ã–±—Ä–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")

async def notify_admins_card_selected(deal: Deal, card: TraderCard):
    from app.bot import create_bot_and_dp
    bot, _ = create_bot_and_dp("")
    
    async with async_session() as s:
        admins = await s.execute(
            select(User.tg_id).where(User.role == RoleEnum.admin)
        )
        admin_tg_ids = [int(r[0]) for r in admins.all() if r[0]]
    
    card_info = (
        f"<b>üéØ –ü–û–ë–ï–î–ò–¢–ï–õ–¨ –í–´–ë–†–ê–õ –ö–ê–†–¢–£</b>\n"
        f"–°–¥–µ–ª–∫–∞ ‚Ññ <code>{deal.deal_no}</code>\n"
        f"–ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {deal.winner_user_id}\n"
        f"–ë–∞–Ω–∫: {deal.winner_card_bank}\n"
        f"–ö–∞—Ä—Ç–∞: {deal.winner_card_mask}\n"
        f"–î–µ—Ä–∂–∞—Ç–µ–ª—å: {deal.winner_card_holder}\n"
        f"–°—É–º–º–∞: {float(deal.amount_rub):.2f} RUB\n\n"
        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ –∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ü–µ—Ä–µ–≤–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω¬ª"
    )
    
    for admin_id in admin_tg_ids:
        try:
            await bot.send_message(
                admin_id,
                card_info,
                reply_markup=kb_admin_paid(deal.id)
            )
        except Exception:
            continue

@router.callback_query(F.data.startswith("admin:paid:"))
async def admin_paid(cq: CallbackQuery):
    deal_id = int(cq.data.split(":")[2])
    
    async with async_session() as s:
        u = await ensure_user(s, cq.from_user)
        if u.role != RoleEnum.admin:
            await cq.answer("–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É", show_alert=True)
            return
        
        deal = await s.get(Deal, deal_id)
        if not deal or deal.status != DealStatus.WAITING_ADMIN_TRANSFER:
            await cq.answer("–°–¥–µ–ª–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", show_alert=True)
            return
        
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å—Ç–∞—Ç—É—Å –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–µ–π–¥–µ—Ä–æ–º
        deal.status = DealStatus.WAITING_TRADER_CONFIRM
        from app.utils.dt import now_tz
        deal.confirm_deadline_at = now_tz() + timedelta(minutes=int(deal.confirm_mins or 10))
        await s.commit()
        
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º –æ–∫–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        from app.scheduler import schedule_trader_confirm_window
        from app.config import settings
        await schedule_trader_confirm_window(deal.id, after_minutes=int(deal.confirm_mins or 10), db_url=settings.database_url)
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
        await notify_winner_payment_received(deal)
        
        await cq.message.edit_text(
            f"<b>‚úÖ –ü–µ—Ä–µ–≤–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!</b>\n"
            f"–°–¥–µ–ª–∫–∞ ‚Ññ <code>{deal.deal_no}</code>\n"
            f"–û–∂–∏–¥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç —Ç—Ä–µ–π–¥–µ—Ä–∞.\n"
            f"–î–µ–¥–ª–∞–π–Ω: –¥–æ {deal.confirm_deadline_at.astimezone(TZ).strftime('%H:%M')}"
        )
        
        await cq.answer("–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω!")

async def notify_winner_payment_received(deal: Deal):
    from app.bot import create_bot_and_dp
    bot, _ = create_bot_and_dp("")
    
    confirm_deadline = deal.confirm_deadline_at.astimezone(TZ).strftime('%H:%M')
    
    b = InlineKeyboardBuilder()
    b.button(text="‚úÖ –Ø –ü–û–õ–£–ß–ò–õ –ü–ï–†–ï–í–û–î", callback_data=f"winner:got_money:{deal.id}")
    b.adjust(1)
    
    await bot.send_message(
        int(await _winner_tg_id(deal.winner_user_id)),
        f"<b>üí∞ –ü–ï–†–ï–í–û–î –ü–û–õ–£–ß–ï–ù!</b>\n"
        f"–°–¥–µ–ª–∫–∞ ‚Ññ <code>{deal.deal_no}</code>\n"
        f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∫–∞—Ä—Ç—É:\n"
        f"{deal.winner_card_bank} ‚Ä¢ {deal.winner_card_mask}\n\n"
        f"<b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞:</b>\n"
        f"–î–µ–¥–ª–∞–π–Ω: –¥–æ {confirm_deadline}",
        reply_markup=b.as_markup()
    )

@router.callback_query(F.data.startswith("winner:got_money:"))
async def winner_got_money(cq: CallbackQuery):
    deal_id = int(cq.data.split(":")[2])
    
    async with async_session() as s:
        u = await ensure_user(s, cq.from_user)
        deal = await s.get(Deal, deal_id)
        
        if not deal or not deal.winner_user_id or int(deal.winner_user_id) != u.id:
            await cq.answer("–û—à–∏–±–∫–∞: —Å–¥–µ–ª–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", show_alert=True)
            return
        
        if deal.status != DealStatus.WAITING_TRADER_CONFIRM:
            await cq.answer("–°–¥–µ–ª–∫–∞ –Ω–µ –≤ —Å—Ç–∞—Ç—É—Å–µ –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è", show_alert=True)
            return
        
        # –°–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ–∑–µ—Ä–≤ USDT
        ok = await consume_reserved_usdt(u.id, float(deal.amount_usdt_snapshot))
        if not ok:
            await cq.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–ø–∏—Å–∞—Ç—å —Ä–µ–∑–µ—Ä–≤", show_alert=True)
            return
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ –∏ –∫–æ–º–∏—Å—Å–∏—é
        reward_rub = float(deal.amount_rub) * float(deal.winner_bid_pct) / 100.0
        reward_rub = bank_round_2(reward_rub)
        
        if reward_rub > 0:
            # –£–¥–µ—Ä–∂–∏–≤–∞–µ–º –∫–æ–º–∏—Å—Å–∏—é —Ç–æ–ª—å–∫–æ —Å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è
            fee_rub = bank_round_2(reward_rub * float(deal.service_fee_pct) / 100.0)
            final_reward = bank_round_2(reward_rub - fee_rub)
            
            u.balance_rub = float(u.balance_rub) + final_reward
        else:
            final_reward = reward_rub
            fee_rub = 0.0
            u.balance_rub = float(u.balance_rub) + final_reward
        
        await s.commit()
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–¥–µ–ª–∫—É
        deal.status = DealStatus.COMPLETED
        await s.commit()
        
        await cq.message.edit_text(
            f"<b>üéâ –°–î–ï–õ–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!</b>\n"
            f"–°–¥–µ–ª–∫–∞ ‚Ññ <code>{deal.deal_no}</code>\n"
            f"–í–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ: {reward_rub:.2f} RUB\n"
            f"–ö–æ–º–∏—Å—Å–∏—è —Å–µ—Ä–≤–∏—Å–∞: {fee_rub:.2f} RUB\n"
            f"–ò—Ç–æ–≥–æ –∫ –∑–∞—á–∏—Å–ª–µ–Ω–∏—é: {final_reward:.2f} RUB\n\n"
            f"–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ –≤ –∞—É–∫—Ü–∏–æ–Ω–µ!"
        )
        
        await cq.answer("–°–¥–µ–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")

@router.callback_query(F.data.startswith("winner:change_card:"))
async def change_card(cq: CallbackQuery, state: FSMContext):
    deal_id = int(cq.data.split(":")[2])
    
    async with async_session() as s:
        u = await ensure_user(s, cq.from_user)
        deal = await s.get(Deal, deal_id)
        
        if not deal or not deal.winner_user_id or int(deal.winner_user_id) != u.id:
            await cq.answer("–û—à–∏–±–∫–∞: —Å–¥–µ–ª–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", show_alert=True)
            return
        
        if deal.status != DealStatus.WAITING_ADMIN_TRANSFER:
            await cq.answer("–°–º–µ–Ω–∞ –∫–∞—Ä—Ç—ã –≤–æ–∑–º–æ–∂–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–æ –æ–ø–ª–∞—Ç—ã", show_alert=True)
            return
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –∫–∞—Ä—Ç—ã
        deal.winner_card_id = None
        deal.winner_card_bank = None
        deal.winner_card_mask = None
        deal.winner_card_holder = None
        await s.commit()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—ã–±–æ—Ä –∫–∞—Ä—Ç—ã –∑–∞–Ω–æ–≤–æ
        await pick_card_start(cq.message, state)
        await cq.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –∫–∞—Ä—Ç—É")

@router.callback_query(F.data.startswith("winner:cancel:"))
async def cancel_deal(cq: CallbackQuery):
    deal_id = int(cq.data.split(":")[2])
    
    async with async_session() as s:
        u = await ensure_user(s, cq.from_user)
        deal = await s.get(Deal, deal_id)
        
        if not deal or not deal.winner_user_id or int(deal.winner_user_id) != u.id:
            await cq.answer("–û—à–∏–±–∫–∞: —Å–¥–µ–ª–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", show_alert=True)
            return
        
        if deal.status not in (DealStatus.WAITING_ADMIN_TRANSFER, DealStatus.WAITING_TRADER_CONFIRM):
            await cq.answer("–û—Ç–º–µ–Ω–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞ –≤ —Ç–µ–∫—É—â–µ–º —Å—Ç–∞—Ç—É—Å–µ", show_alert=True)
            return
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑–µ—Ä–≤ USDT
        await release_usdt(u.id, float(deal.amount_usdt_snapshot))
        
        # –®—Ç—Ä–∞—Ñ 200 RUB
        u.balance_rub = max(0.0, float(u.balance_rub) - 200.0)
        
        # –û—Ç–º–µ–Ω—è–µ–º —Å–¥–µ–ª–∫—É
        deal.status = DealStatus.CANCELLED_BY_TRADER
        await s.commit()
        
        await cq.message.edit_text(
            f"<b>‚ùå –°–î–ï–õ–ö–ê –û–¢–ú–ï–ù–ï–ù–ê</b>\n"
            f"–°–¥–µ–ª–∫–∞ ‚Ññ <code>{deal.deal_no}</code>\n"
            f"–ü—Ä–∏—á–∏–Ω–∞: –æ—Ç–º–µ–Ω–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–º\n"
            f"–®—Ç—Ä–∞—Ñ: -200 RUB\n"
            f"–†–µ–∑–µ—Ä–≤ USDT –≤–æ–∑–≤—Ä–∞—â–µ–Ω"
        )
        
        await cq.answer("–°–¥–µ–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞!")

async def _winner_tg_id(user_id: int) -> int:
    async with async_session() as s:
        u = await s.get(User, user_id)
        return int(u.tg_id or 0)
