"""
–ú–∞—Å—Ç–µ—Ä —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–∫—É–ø–∫–∏ USDT - —Å–∫–µ–ª–µ—Ç (–ø–∞—Ç—á ‚Ññ21)
"""

from __future__ import annotations
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from decimal import Decimal
import logging

from app.db.base import async_session
from app.db.models import User, RoleEnum
from app.handlers.utils import ensure_user
from app.trading.service import TradingService
from app.trading.enums import TradeType

router = Router(name="trading_admin_buy")
log = logging.getLogger(__name__)

class BuyTradeStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –º–∞—Å—Ç–µ—Ä–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–∫—É–ø–∫–∏"""
    amount_rub = State()           # –°—É–º–º–∞ –≤ RUB
    account_details = State()      # –°—á–µ—Ç/—Ä–µ–∫–≤–∏–∑–∏—Ç—ã
    base_pct = State()            # –ë–∞–∑–æ–≤—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç
    service_fee_pct = State()     # –ö–æ–º–∏—Å—Å–∏—è —Å–µ—Ä–≤–∏—Å–∞

@router.callback_query(F.data == "admin:trading_buy_new")
async def start_buy_master(cq: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –º–∞—Å—Ç–µ—Ä–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–∫—É–ø–∫–∏"""
    async with async_session() as s:
        u = await ensure_user(s, cq.from_user)
        if u.role != RoleEnum.admin:
            await cq.answer("–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.", show_alert=True)
            return
    
    await state.clear()
    await state.set_state(BuyTradeStates.amount_rub)
    
    await cq.message.answer(
        "üîÑ <b>–ú–∞—Å—Ç–µ—Ä —Å–æ–∑–¥–∞–Ω–∏—è –ü–û–ö–£–ü–ö–ò USDT</b>\n\n"
        "1Ô∏è‚É£ <b>–°—É–º–º–∞ —Å–¥–µ–ª–∫–∏ –≤ RUB</b>\n"
        "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ —Ä—É–±–ª—è—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 10000):"
    )
    await cq.answer()

@router.message(BuyTradeStates.amount_rub)
async def process_amount_rub(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—É–º–º—ã –≤ RUB"""
    try:
        amount = Decimal(message.text.replace(",", "."))
        if amount <= 0:
            await message.answer("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥:")
            return
        
        await state.update_data(amount_rub=amount)
        await state.set_state(BuyTradeStates.account_details)
        
        await message.answer(
            "‚úÖ <b>–°—É–º–º–∞ –ø—Ä–∏–Ω—è—Ç–∞:</b> {:.2f} RUB\n\n"
            "2Ô∏è‚É£ <b>–°—á–µ—Ç/—Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è RUB</b>\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—á–µ—Ç–∞ –∏–ª–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã:".format(amount)
        )
        
    except (ValueError, TypeError):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 10000):")

@router.message(BuyTradeStates.account_details)
async def process_account_details(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—á–µ—Ç–∞/—Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤"""
    account_details = message.text.strip()
    if not account_details:
        await message.answer("‚ùå –†–µ–∫–≤–∏–∑–∏—Ç—ã –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥:")
        return
    
    await state.update_data(account_details=account_details)
    await state.set_state(BuyTradeStates.base_pct)
    
    await message.answer(
        "‚úÖ <b>–†–µ–∫–≤–∏–∑–∏—Ç—ã –ø—Ä–∏–Ω—è—Ç—ã:</b> {}\n\n"
        "3Ô∏è‚É£ <b>–ë–∞–∑–æ–≤—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç</b>\n"
        "–í–≤–µ–¥–∏—Ç–µ –±–∞–∑–æ–≤—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç (-100 –¥–æ +100, –Ω–∞–ø—Ä–∏–º–µ—Ä: 2.5):".format(account_details)
    )

@router.message(BuyTradeStates.base_pct)
async def process_base_pct(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –±–∞–∑–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ–Ω—Ç–∞"""
    try:
        base_pct = Decimal(message.text.replace(",", "."))
        if not (-100 <= base_pct <= 100):
            await message.answer("‚ùå –ü—Ä–æ—Ü–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç -100 –¥–æ +100. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥:")
            return
        
        await state.update_data(base_pct=base_pct)
        await state.set_state(BuyTradeStates.service_fee_pct)
        
        await message.answer(
            "‚úÖ <b>–ë–∞–∑–æ–≤—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∏–Ω—è—Ç:</b> {:.2f}%\n\n"
            "4Ô∏è‚É£ <b>–ö–æ–º–∏—Å—Å–∏—è —Å–µ—Ä–≤–∏—Å–∞</b>\n"
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∏—Å—Å–∏—é –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö (0-100, –Ω–∞–ø—Ä–∏–º–µ—Ä: 1.0):".format(base_pct)
        )
        
    except (ValueError, TypeError):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–∞. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2.5):")

@router.message(BuyTradeStates.service_fee_pct)
async def process_service_fee_pct(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∏—Å—Å–∏–∏ —Å–µ—Ä–≤–∏—Å–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏"""
    try:
        service_fee_pct = Decimal(message.text.replace(",", "."))
        if not (0 <= service_fee_pct <= 100):
            await message.answer("‚ùå –ö–æ–º–∏—Å—Å–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 0 –¥–æ 100. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥:")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ FSM
        data = await state.get_data()
        amount_rub = data["amount_rub"]
        account_details = data["account_details"]
        base_pct = data["base_pct"]
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä–Ω—É—é —Å—É–º–º—É USDT (–ø–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞)
        # –í —Å–ª–µ–¥—É—é—â–µ–º –ø–∞—Ç—á–µ –¥–æ–±–∞–≤–∏–º —Ä–µ–∞–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç –ø–æ –∫—É—Ä—Å—É
        amount_usdt = amount_rub / Decimal("100")  # –ó–∞–≥–ª—É—à–∫–∞
        
        # –°–æ–∑–¥–∞–µ–º —Ç–æ—Ä–≥–æ–≤—É—é –æ–ø–µ—Ä–∞—Ü–∏—é
        trade = await TradingService.create_trade(
            trade_type=TradeType.BUY,
            amount_rub=amount_rub,
            amount_usdt=amount_usdt,
            base_pct=base_pct,
            service_fee_pct=service_fee_pct,
            deadlines={
                "account_details": account_details,
                "created_at": str(message.date)
            }
        )
        
        if trade:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª—É–∂–µ–±–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ-–∫–∞—Ä—Ç–æ—á–∫—É —Å–¥–µ–ª–∫–∏ –∞–¥–º–∏–Ω—É
            from app.trading.service import render_trade_card, register_admin_view, set_countdown
            text = await render_trade_card(trade.id, None)
            msg = await message.answer(text)
            
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º UI-—Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –¥–µ–º–æ-—Ç–∞–π–º–µ—Ä
            await register_admin_view(trade.id, msg.chat.id, msg.message_id)
            # –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–µ—Ö–∞–Ω–∏–∫–∏ ‚Äî –∑–∞–ø—É—Å–∫–∞–µ–º –¥–µ–º–æ-—Ç–∞–π–º–µ—Ä –Ω–∞ 120 —Å–µ–∫—É–Ω–¥
            await set_countdown(trade.id, 120)
            
            await message.answer(
                "‚úÖ <b>–ß–µ—Ä–Ω–æ–≤–∏–∫ —Å–¥–µ–ª–∫–∏ —Å–æ–∑–¥–∞–Ω (—Å–∫–µ–ª–µ—Ç)</b>\n\n"
                f"üìã <b>ID —Å–¥–µ–ª–∫–∏:</b> {trade.id}\n"
                f"üí∞ <b>–°—É–º–º–∞:</b> {amount_rub:.2f} RUB\n"
                f"üí± <b>USDT:</b> {amount_usdt:.2f}\n"
                f"üìä <b>–ë–∞–∑–æ–≤—ã–π %:</b> {base_pct:.2f}%\n"
                f"üí∏ <b>–ö–æ–º–∏—Å—Å–∏—è:</b> {service_fee_pct:.2f}%\n"
                f"üè¶ <b>–†–µ–∫–≤–∏–∑–∏—Ç—ã:</b> {account_details}\n\n"
                "üîß <i>–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ (–ø–∞—Ç—á ‚Ññ21)</i>\n"
                "‚è∞ <i>–î–µ–º–æ-—Ç–∞–π–º–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ 120 —Å–µ–∫—É–Ω–¥</i>"
            )
            
            log.info(f"Created BUY trade: id={trade.id}, amount_rub={amount_rub}")
        else:
            await message.answer(
                "‚ùå <b>–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏</b>\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
        
        await state.clear()
        
    except (ValueError, TypeError):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∏—Å—Å–∏–∏. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1.0):")
