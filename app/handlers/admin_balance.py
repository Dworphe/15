from __future__ import annotations
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from sqlalchemy import select, func
from decimal import Decimal

from app.db.base import async_session
from app.db.models import User, RoleEnum
# –∞—É–¥–∏—Ç –µ—Å—Ç—å –≤ –ø—Ä–æ–µ–∫—Ç–µ ‚Äî –ª–æ–≥–∏—Ä—É–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ (–µ—Å–ª–∏ –º–æ–¥–µ–ª—å –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç)
try:
    from app.db.models import AuditLog
except Exception:
    AuditLog = None

from app.handlers.utils import ensure_user

router = Router(name="admin_balance")

class BalopStates(StatesGroup):
    op = State()
    user_id = State()
    amount = State()

def _round2(x: float) -> float:
    return float(Decimal(str(x)).quantize(Decimal("0.01")))

async def _admin_only(message: Message) -> bool:
    async with async_session() as session:
        u = await ensure_user(session, message.from_user)
        if u.role != RoleEnum.admin:
            await message.answer("–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return False
        return True

async def _find_user_by_any(session, raw_text: str, reply_from=None) -> User | None:
    """–•–ï–õ–ü–ï–†: –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ä–∞–∑–Ω—ã–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞–º"""
    # 1) –µ—Å–ª–∏ –∞–¥–º–∏–Ω –æ—Ç–≤–µ—Ç–∏–ª —Ä–µ–ø–ª–∞–µ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if reply_from:
        u = await session.scalar(select(User).where(User.tg_id == reply_from.id))
        if u:
            return u

    if not raw_text:
        return None
    t = raw_text.strip()

    # 2) tg://user?id=123456 –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —á–∏—Å–ª–æ
    # –≤—ã—Ü–µ–ø–∏–º —Ü–∏—Ñ—Ä—ã
    for prefix in ("tg://user?id=", "user?id="):
        if t.startswith(prefix):
            t = t[len(prefix):]
            break

    # –µ—Å–ª–∏ —á–∏—Å–ª–æ ‚Äî –ø—Ä–æ–±—É–µ–º –∫–∞–∫ users.id, –∑–∞—Ç–µ–º –∫–∞–∫ tg_id
    digits = t.replace(" ", "")
    if digits.isdigit():
        num = int(digits)
        # —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –∫–∞–∫ PK users.id
        u = await session.get(User, num)
        if u:
            return u
        # –∑–∞—Ç–µ–º –∫–∞–∫ tg_id
        return await session.scalar(select(User).where(User.tg_id == num))

    return None

@router.message(Command("balance_add"))
async def balance_add_start(message: Message, state: FSMContext):
    if not await _admin_only(message): return
    await state.set_state(BalopStates.op)
    await state.update_data(op="ADD")
    await state.set_state(BalopStates.user_id)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ <b>users.id</b> –∏–ª–∏ <b>tg_id</b>, –∏–ª–∏ –æ—Ç–≤–µ—Ç—å—Ç–µ —Ä–µ–ø–ª–∞–µ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")

@router.message(Command("balance_sub"))
async def balance_sub_start(message: Message, state: FSMContext):
    if not await _admin_only(message): return
    await state.set_state(BalopStates.op)
    await state.update_data(op="SUB")
    await state.set_state(BalopStates.user_id)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ <b>users.id</b> –∏–ª–∏ <b>tg_id</b>, –∏–ª–∏ –æ—Ç–≤–µ—Ç—å—Ç–µ —Ä–µ–ø–ª–∞–µ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")

@router.message(BalopStates.user_id)
async def bal_user_id(message: Message, state: FSMContext):
    async with async_session() as session:
        reply_from = message.reply_to_message.from_user if message.reply_to_message else None
        user = await _find_user_by_any(session, message.text or "", reply_from=reply_from)
        if not user:
            await message.answer(
                "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.\n"
                "–£–∫–∞–∂–∏ <b>users.id</b> –∏–ª–∏ <b>tg_id</b>, –∏–ª–∏ –æ—Ç–≤–µ—Ç—å —Ä–µ–ø–ª–∞–µ–º –Ω–∞ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ."
            )
            return
        await state.update_data(user_id=user.id)
        label = f"id={user.id}, tg_id={user.tg_id}"
        await state.set_state(BalopStates.amount)
        await message.answer(
            f"–ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <code>{label}</code>\n"
            "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É (RUB), –Ω–∞–ø—Ä–∏–º–µ—Ä 1500.00"
        )

@router.message(BalopStates.amount)
async def bal_amount(message: Message, state: FSMContext):
    txt = (message.text or "").replace(" ", "").replace(",", ".")
    try:
        amount = float(txt)
        if amount <= 0: raise ValueError
    except Exception:
        await message.answer("–°—É–º–º–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä 1500.00")
        return

    data = await state.get_data()
    op = data["op"]
    uid = data["user_id"]

    async with async_session() as session:
        user = await session.get(User, uid)
        if not user:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await state.clear()
            return

        old = float(user.balance_rub or 0.0)
        if op == "ADD":
            new_bal = _round2(old + amount)
            action = "BALANCE_ADD"
            note = f"–ó–∞—á–∏—Å–ª–µ–Ω–∏–µ {amount:.2f} RUB –∞–¥–º–∏–Ω–æ–º @{message.from_user.username or message.from_user.id}"
        else:
            if old < amount:
                await message.answer(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {old:.2f} RUB")
                await state.clear()
                return
            new_bal = _round2(old - amount)
            action = "BALANCE_SUB"
            note = f"–°–ø–∏—Å–∞–Ω–∏–µ {amount:.2f} RUB –∞–¥–º–∏–Ω–æ–º @{message.from_user.username or message.from_user.id}"

        user.balance_rub = new_bal
        await session.commit()

        # –∞—É–¥–∏—Ç (–µ—Å–ª–∏ –º–æ–¥–µ–ª—å –µ—Å—Ç—å)
        if AuditLog:
            try:
                session.add(AuditLog(
                    actor_tg_id=message.from_user.id,
                    actor_role="admin",
                    action=action,
                    entity="user_balance",
                    before=str({"user_id": uid, "balance_rub": old}),
                    after=str({"user_id": uid, "balance_rub": new_bal}),
                    note=note,
                ))
                await session.commit()
            except Exception:
                pass

    await message.answer(
        f"–ì–æ—Ç–æ–≤–æ. –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è id={uid}: {new_bal:.2f} RUB (–±—ã–ª {old:.2f} RUB)."
    )

    # (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) —É–≤–µ–¥–æ–º–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await message.bot.send_message(
            chat_id=user.tg_id,
            text=("üí∞ –ù–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å –∑–∞—á–∏—Å–ª–µ–Ω–æ "
                  if op == "ADD" else
                  "üí≥ –° –≤–∞—à–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ —Å–ø–∏—Å–∞–Ω–æ ")
                 + f"{amount:.2f} RUB. –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {new_bal:.2f} RUB."
        )
    except Exception:
        pass

    await state.clear()

# ===== –ò–ù–õ–ê–ô–ù-–ú–ï–ù–Æ –î–õ–Ø –ê–î–ú–ò–ù–ê =====

def admin_balance_menu_kb():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–º"""
    kb = InlineKeyboardBuilder()
    kb.button(text="‚ûï –ó–∞—á–∏—Å–ª–∏—Ç—å –Ω–∞ –±–∞–ª–∞–Ω—Å", callback_data="admin_balance:add")
    kb.button(text="‚ûñ –°–Ω—è—Ç—å —Å –±–∞–ª–∞–Ω—Å–∞", callback_data="admin_balance:sub")
    kb.adjust(1)
    return kb.as_markup()

@router.message(Command("balance_menu"))
async def admin_balance_menu(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–º"""
    # –∑–∞—â–∏—Ç–∞: –¥–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—É
    if not await _admin_only(message):
        return
    await message.answer(
        "<b>–û–ø–µ—Ä–∞—Ü–∏–∏ —Å –±–∞–ª–∞–Ω—Å–æ–º</b>\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=admin_balance_menu_kb()
    )

async def _admin_only_cq(cq: CallbackQuery) -> bool:
    """–ú–∏–Ω–∏-–ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏ –ø–æ tg_id –¥–ª—è callback'–æ–≤"""
    async with async_session() as session:
        user = await session.scalar(select(User).where(User.tg_id == cq.from_user.id))
        if not user or user.role != RoleEnum.admin:
            await cq.answer("–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.", show_alert=True)
            return False
        return True

@router.callback_query(F.data == "admin_balance:add")
async def cb_admin_balance_add(cq: CallbackQuery, state: FSMContext):
    """Callback –¥–ª—è –∫–Ω–æ–ø–∫–∏ '–ó–∞—á–∏—Å–ª–∏—Ç—å –Ω–∞ –±–∞–ª–∞–Ω—Å'"""
    if not await _admin_only_cq(cq):
        return
    await state.set_state(BalopStates.op)
    await state.update_data(op="ADD")
    await state.set_state(BalopStates.user_id)
    await cq.message.answer("–í–≤–µ–¥–∏—Ç–µ <b>users.id</b> –∏–ª–∏ <b>tg_id</b>, –∏–ª–∏ –æ—Ç–≤–µ—Ç—å—Ç–µ —Ä–µ–ø–ª–∞–µ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
    await cq.answer()

@router.callback_query(F.data == "admin_balance:sub")
async def cb_admin_balance_sub(cq: CallbackQuery, state: FSMContext):
    """Callback –¥–ª—è –∫–Ω–æ–ø–∫–∏ '–°–Ω—è—Ç—å —Å –±–∞–ª–∞–Ω—Å–∞'"""
    if not await _admin_only_cq(cq):
        return
    await state.set_state(BalopStates.op)
    await state.update_data(op="SUB")
    await state.set_state(BalopStates.user_id)
    await cq.message.answer("–í–≤–µ–¥–∏—Ç–µ <b>users.id</b> –∏–ª–∏ <b>tg_id</b>, –∏–ª–∏ –æ—Ç–≤–µ—Ç—å—Ç–µ —Ä–µ–ø–ª–∞–µ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
    await cq.answer()
