from __future__ import annotations
from datetime import timedelta
import logging
from typing import Iterable

from aiogram import Bot
from sqlalchemy import select, update

from app.db.base import async_session
from app.db.models import Deal, DealRound, SystemSettings, DealStatus, User, RoleEnum, DealParticipant
from app.scheduler import get_scheduler
from app.utils.dt import now_tz, to_aware_utc
from app.workers.timers import ensure_update_timer

log = logging.getLogger(__name__)


async def _broadcast_stage1(bot: Bot, deal: Deal) -> Iterable[int]:
    """–†–∞–∑–æ—à–ª—ë–º ¬´–ù–æ–≤–∞—è —Å–¥–µ–ª–∫–∞ ‚Äî –ü—Ä–∏–Ω—è—Ç—å/–û—Ç–∫–ª–æ–Ω–∏—Ç—å¬ª –∏ –≤–µ—Ä–Ω—ë–º chat_id –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π."""
    from app.handlers.utils import ensure_user
    from app.utils.keyboard import InlineKeyboardBuilder
    
    recipients: list[int] = []
    
    async with async_session() as s:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—Ä–µ–π–¥–µ—Ä–æ–≤
        users_result = await s.execute(
            select(User.tg_id).where(
                User.role == RoleEnum.trader,
                User.is_active == True
            )
        )
        trader_tg_ids = [row[0] for row in users_result.fetchall()]
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
        from aiogram.utils.keyboard import InlineKeyboardBuilder
        kb = InlineKeyboardBuilder()
        kb.button(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å —Å–¥–µ–ª–∫—É (+1 REP)", callback_data=f"deal:{deal.id}:accept")
        kb.button(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å —Å–¥–µ–ª–∫—É (-2 REP)", callback_data=f"deal:{deal.id}:decline")
        kb.adjust(1)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º —Ç—Ä–µ–π–¥–µ—Ä–∞–º
        for tg_id in trader_tg_ids:
            try:
                await bot.send_message(
                    tg_id,
                    (
                        "üéØ <b>–ù–û–í–ê–Ø –°–î–ï–õ–ö–ê ‚Äî –ê–£–ö–¶–ò–û–ù (–ü–û–ö–£–ü–ö–ê)</b>\n\n"
                        f"üìã <b>–ù–æ–º–µ—Ä:</b> <code>{deal.deal_no}</code>\n"
                        f"üí∞ <b>–°—É–º–º–∞:</b> {deal.amount_rub:.2f} RUB (~{deal.amount_usdt_snapshot:.2f} USDT)\n"
                        f"üéÅ <b>–í–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ (–±–∞–∑–∞):</b> {deal.base_pct:.2f}%\n"
                        f"üí≥ <b>–ë–∞–Ω–∫:</b> {deal.pay_bank}\n"
                        f"‚è∞ <b>–í—Ä–µ–º—è –Ω–∞ –ø—Ä–∏–Ω—è—Ç–∏–µ:</b> 60 —Å–µ–∫\n\n"
                        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
                    ),
                    reply_markup=kb.as_markup(),
                    parse_mode="HTML"
                )
                recipients.append(tg_id)
            except Exception as e:
                log.warning(f"Failed to send message to {tg_id}: {e}")
                continue
    
    return recipients


async def start_stage1_for_deal(deal_id: int) -> None:
    async with async_session() as s:
        d = await s.get(Deal, deal_id)
        if not d:
            return
        st = (await s.execute(select(SystemSettings))).scalar_one()
        # –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –≤ SystemSettings –µ—Å—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≠—Ç–∞–ø–∞ 1 (–µ—Å–ª–∏ –µ—ë –Ω–µ—Ç ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º round_secs_default)
        stage1_secs = getattr(st, "stage1_secs_default", None) or getattr(st, "round_secs_default", 60)
        d.status = DealStatus.OPEN
        d.stage1_deadline_at = now_tz() + timedelta(seconds=stage1_secs)
        d.stage1_finished = False
        await s.commit()

    # –ü–æ–ª—É—á–∞–µ–º –±–æ—Ç–∞ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
    try:
        bot = Bot.get_current()
    except RuntimeError:
        # –ï—Å–ª–∏ –±–æ—Ç –Ω–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ, —Å–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π
        from app.config import settings
        bot = Bot(token=settings.bot_token)
    
    recips = await _broadcast_stage1(bot, d)

    # –ü–ª–∞–Ω–∏—Ä—É–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏–µ –≠—Ç–∞–ø–∞ 1
    scheduler = get_scheduler()
    scheduler.add_job(
        end_stage1,
        trigger="date",
        run_date=to_aware_utc(d.stage1_deadline_at),
        id=f"deal:{deal_id}:stage1",
        kwargs={"deal_id": deal_id},
        replace_existing=True,
    )

    # –í–∫–ª—é—á–∏–º ¬´–æ–¥–∏–Ω —Ç–∞–π–º–µ—Ä¬ª –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
    for chat_id in recips:
        ensure_update_timer(scheduler, chat_id, deal_id, kind="buy")


async def end_stage1(deal_id: int) -> None:
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≠—Ç–∞–ø–∞ 1: –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–∏–Ω—è–≤—à–∏–µ ‚Äî –∑–∞–ø—É—Å–∫–∞–µ–º –†–∞—É–Ω–¥ 1, –∏–Ω–∞—á–µ –æ—Ç–º–µ–Ω—è–µ–º —Å–¥–µ–ª–∫—É."""
    async with async_session() as s:
        d = await s.get(Deal, deal_id)
        if not d:
            return

        # –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –ø—Ä–∏–Ω—è–≤—à–∏—Ö —É—á–∞—Å—Ç–∏–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã DealParticipant
        participants_result = await s.execute(
            select(DealParticipant.user_id).where(
                DealParticipant.deal_id == deal_id,
                DealParticipant.accepted == True
            )
        )
        participants = [row[0] for row in participants_result.fetchall()]

        d.stage1_finished = True

        if not participants:
            d.status = DealStatus.CANCELLED
            await s.commit()
            log.info("Deal %s cancelled: no participants", deal_id)
            return

        # –°—Ç–∞—Ä—Ç –†–∞—É–Ω–¥–∞ 1
        st = (await s.execute(select(SystemSettings))).scalar_one()
        round_secs = getattr(st, "round_secs_default", 60)
        d.status = DealStatus.BIDDING

        r1 = DealRound(deal_id=deal_id, round_number=1, is_active=True,
                       deadline_at=now_tz() + timedelta(seconds=round_secs))
        s.add(r1)
        await s.commit()

    # –ü–ª–∞–Ω–∏—Ä—É–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏–µ –†–∞—É–Ω–¥–∞ 1
    scheduler = get_scheduler()
    scheduler.add_job(
        end_round,
        trigger="date",
        run_date=to_aware_utc(r1.deadline_at),
        id=f"deal:{deal_id}:round:{r1.round_number}",
        kwargs={"deal_id": deal_id, "round_no": 1},
        replace_existing=True,
    )

    # –í–∫–ª—é—á–∏–º —Ç–∞–π–º–µ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–∞–º (–µ—Å–ª–∏ –Ω–µ –≤–∫–ª—é—á–µ–Ω)
    for chat_id in participants:
        ensure_update_timer(scheduler, chat_id, deal_id, kind="buy")


async def end_round(deal_id: int, round_no: int) -> None:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º —Ç–∞–π-–±—Ä–µ–π–∫ —Ä–∞—É–Ω–¥, –ª–∏–±–æ –∑–∞–ø—É—Å–∫–∞–µ–º —ç—Ç–∞–ø –æ–ø–ª–∞—Ç—ã."""
    async with async_session() as s:
        # 1) –ó–∞–∫—Ä–æ–µ–º —Ç–µ–∫—É—â–∏–π —Ä–∞—É–Ω–¥
        r = (await s.execute(
            select(DealRound).where(DealRound.deal_id == deal_id,
                                    DealRound.round_number == round_no)
        )).scalar_one_or_none()
        if not r:
            return
        r.is_active = False

        d = await s.get(Deal, deal_id)

        # TODO: –û–ø—Ä–µ–¥–µ–ª–∏ –∑–¥–µ—Å—å –ø–æ–±–µ–¥–∏—Ç–µ–ª—è: winner_user_id, winner_bid_pct
        winner_user_id: int | None = getattr(d, "winner_user_id", None)

        if winner_user_id is None:
            # –ù–∏—á—å—è ‚Üí —Å–æ–∑–¥–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞—É–Ω–¥ (–µ—Å–ª–∏ –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç)
            st = (await s.execute(select(SystemSettings))).scalar_one()
            next_no = round_no + 1
            max_ties = getattr(st, "max_tie_rounds_default", 1)
            if next_no > (1 + max_ties):
                # —Ñ–æ—Ä—Å-–ø–æ–±–µ–¥–∏—Ç–µ–ª—å –ø–æ –ø—Ä–∞–≤–∏–ª—É —Å–µ—Ä–≤–∏—Å–∞ –∏–ª–∏ –æ—Ç–º–µ–Ω–∞
                d.status = DealStatus.CANCELLED
                await s.commit()
                return

            r_next = DealRound(deal_id=deal_id, round_number=next_no, is_active=True,
                               deadline_at=now_tz() + timedelta(seconds=getattr(st, "round_secs_default", 60)))
            s.add(r_next)
            await s.commit()

            # –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞—É–Ω–¥
            get_scheduler().add_job(
                end_round,
                trigger="date",
                run_date=to_aware_utc(r_next.deadline_at),
                id=f"deal:{deal_id}:round:{next_no}",
                kwargs={"deal_id": deal_id, "round_no": next_no},
                replace_existing=True,
            )
            return

        # –ï—Å—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª—å ‚Üí —ç—Ç–∞–ø –æ–ø–ª–∞—Ç—ã –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–º
        st = (await s.execute(select(SystemSettings))).scalar_one()
        pay_mins = getattr(st, "pay_mins_default", 20)
        d.winner_user_id = winner_user_id
        d.pay_deadline_at = now_tz() + timedelta(minutes=pay_mins)
        d.status = DealStatus.WAITING_ADMIN_TRANSFER
        await s.commit()

    # –ü–ª–∞–Ω–∏—Ä—É–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏–µ –æ–ø–ª–∞—Ç—ã
    get_scheduler().add_job(
        end_pay,
        trigger="date",
        run_date=to_aware_utc(d.pay_deadline_at),
        id=f"deal:{deal_id}:pay",
        kwargs={"deal_id": deal_id},
        replace_existing=True,
    )


async def end_pay(deal_id: int) -> None:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã –ø–æ –¥–µ–¥–ª–∞–π–Ω—É ‚Äî –ª–∏–±–æ —É—Å–ø–µ—Ö, –ª–∏–±–æ —Å–ø–æ—Ä/–æ—Ç–º–µ–Ω–∞."""
    async with async_session() as s:
        d = await s.get(Deal, deal_id)
        if not d:
            return
        if getattr(d, "is_paid", False):
            d.status = DealStatus.COMPLETED
        else:
            d.status = DealStatus.REVIEW  # –∏–ª–∏ CANCELLED
        await s.commit()
